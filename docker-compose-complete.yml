version: "3.9"

services:

  amq:
    image: registry.redhat.io/amq7/amq-broker-rhel8:7.11.1
    container_name: amq
    hostname: amq
    restart: always
    ports:
      - 8161:8161
      - 61616:61616
    environment:
      - TZ=Europe/Madrid
      - AMQ_USER=amquser
      - AMQ_PASSWORD=password
    healthcheck:
      test: /home/jboss/broker/bin/artemis check node | grep success
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s
    networks:
      - demo-network

  dg:
    image: registry.redhat.io/datagrid/datagrid-8-rhel8:1.4
    container_name: dg
    hostname: dg
    restart: always
    ports:
      - 11222:11222
    environment:
      - TZ=Europe/Madrid
      - USER=dguser
      - PASS=password
    volumes:
      - ./infinispan.xml:/opt/infinispan/server/conf/infinispan.xml
    healthcheck:
      test: curl --fail http://127.0.0.1:11222 || exit 1
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s
    networks:
      - demo-network

  amq-client:
    image: amq-client:1.0
    container_name: amq-client
    build:
      context: amq-client
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: amq
    ports:
      - "8081:8081"
    depends_on:
      dg:
        condition: service_healthy
        restart: true
      amq:
        condition: service_healthy
        restart: true
    networks:
      - demo-network

  app1-camel-amq-datagrid:
    image: app1-camel-amq-datagrid:1.0
    container_name: app1-camel-amq-datagrid
    build:
      context: app1-camel-amq-datagrid
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: amq
      DG_HOST: dg
    depends_on:
      dg:
        condition: service_healthy
        restart: true
      amq:
        condition: service_healthy
        restart: true
    networks:
      - demo-network

  app2-camel-amq-datagrid:
    image: app2-camel-amq-datagrid:1.0
    container_name: app2-camel-amq-datagrid
    build:
      context: app2-camel-amq-datagrid
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: amq
      DG_HOST: dg
    depends_on:
      dg:
        condition: service_healthy
        restart: true
      amq:
        condition: service_healthy
        restart: true
    networks:
      - demo-network

  app-cache-client:
    image: app-cache-client:1.0
    container_name: app-cache-client
    build:
      context: app-cache-client
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: amq
      DG_HOST: dg
    ports:
      - "8080:8080"
    depends_on:
      dg:
        condition: service_healthy
        restart: true
      amq:
        condition: service_healthy
        restart: true
    networks:
      - demo-network

networks:
  demo-network:
    name: demo-network
